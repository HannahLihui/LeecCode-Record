# 55
class Solution {
public:
    int res;
    int maxDepth(TreeNode* root) {
        DFS(root,0);
        return res;
    }

    void DFS(TreeNode* root,int depth){
        if(root == NULL){
            if(depth > res){
                res = depth;
            }
            return;
        }

        DFS(root->left,depth+1);
        DFS(root->right,depth+1);
    }

};

# 07
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return buildTreeCore(0,preorder.size()-1,0,inorder.size()-1,preorder,inorder);
    }

    TreeNode* buildTreeCore(int preL,int preR,int inL,int inR,vector<int> preorder,vector<int> inorder){
        if(preL > preR){
            return NULL;
        }

        TreeNode* root = new TreeNode(0);
        root->val = preorder[preL];
        int k;
        for(k = inL;k<=inR;k++){
            if(inorder[k]==preorder[preL]){
                break;
            }
        }

        int numLeft = k - inL;

        root->left = buildTreeCore(preL+1,preL + numLeft,inL,k-1,preorder,inorder);
        root->right = buildTreeCore(preL+numLeft+1,preR,k+1,inR,preorder,inorder);

        return root;
    }
};
